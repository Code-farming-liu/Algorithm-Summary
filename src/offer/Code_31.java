package offer;

/**
 * @ClassName: Test29
 * @Description: 整数中出现的次数（从1到n整数中1出现的次数）
 * 求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
 * 为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,
 * 但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,
 * 可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
 * @Author: Admin
 **/

public class Code_31 {
    /**
     * @param n
     * @Author: Admin
     * @Description: 设N = abcde ,其中abcde分别为十进制中各位上的数字。
     * 如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
     * ① 如果百位上数字为0，百位上可能出现1的次数由更高位决定。比如：12013，
     * 则可以知道百位出现1的情况可能是：100199，11001199,21002199，，...，1110011199，一共1200个。可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。
     * ② 如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。比如：12113，则可以知道百位受高位影响出现的情况是：100199，11001199,21002199，，....，1110011199，一共1200个。
     * 和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。但同时它还受低位影响，百位出现1的情况是：1210012113,一共114个，等于低位数字（113）+1。
     * ③ 如果百位上数字大于1（29），则百位上出现1的情况仅由更高位决定，比如12213，则百位出现1的情况是：100...199,1100...1199，2100...2199，...，1110011199,1210012199,一共有1300个，并且等于更高位数字+1（12+1）乘以当前位数（100）。
     * 总结：
     * 如果当前位置大于 1 则由上一个位置决定 也即 等于更高位数字+1（12+1）乘以当前位数（100）。 (high + 1) * index
     * 如果当前位置等于 1 则由上一个位置合下一个位置共同决定 也即 等于更高位数字（12）乘以当前位数（100）。同时它还受低位影响， 百位出现1的情况是：12100~12113,一共114个，等于低位数字（113）+1。 high * index + low + 1
     * 如果当前位置为0 则由上一个位置决定也即等于更高位数字（12）乘以 当前位数（100）。high * index
     * @return: int
     */
    public int NumberOf1Between1AndN_Solution(int n) {
        //当前的位置
        int index = 1;
        int count = 0;
        int high = n, low = 0, cur = 0;
        while (high > 0) {
            high /= 10;
            cur = (n / index) % 10;
            low = n - (n / index) * index;
            if (cur == 0) {
                count += high * index;
            }
            if (cur == 1) {
                count += high * index + low + 1;
            }
            if (cur > 1) {
                count += (high + 1) * index;
            }
            index *= 10;
        }
        return count;
    }
}